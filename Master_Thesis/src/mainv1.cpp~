#include <ros/ros.h>
#include <math.h>
#include <stdio.h>
#include <std_msgs/UInt8.h>
#include <sstream>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <cv.h>
#include <iostream>

using namespace std;
using namespace cv;

namespace enc = sensor_msgs::image_encodings;

static const char WINDOW[] = "Image window";

class ImageConverter
{
	ros::NodeHandle nh_;
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
  ros::Publisher image_pub_;
  
public:
  ImageConverter()
    : it_(nh_)
  {
    image_pub_ = nh_.advertise<std_msgs::UInt8>("out", 1);
    image_sub_ = it_.subscribe("camera/rgb/image_mono", 1, &ImageConverter::imageCallback, this);

    cv::namedWindow(WINDOW);
	//cout<<"test"<<endl;
  }

  ~ImageConverter()
  {
    cv::destroyWindow(WINDOW);
  }

  void imageCallback(const sensor_msgs::ImageConstPtr& msg)
  {
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg);
		//cout<<cv_ptr->image;
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }

	
    cv::imshow(WINDOW, cv_ptr->image);
	uint8_t valuepixels [640*480];
	int pixelnumber=0;
	for (int i=0; i<640; i++){
		for (int j=0; j<480; j++){
			pixelnumber=j+i*480;
			valuepixels[pixelnumber] = cv_ptr->image.at<uint8_t>(j,i);
			//printf("valeur %i: %i \n",pixelnumber, valuepixels[pixelnumber]);
		}
	}
	//cout << "pixel value 1,1:" << <<endl;
	//cout<<"Element is of type: "<<cv_ptr->image.depth() <<endl;
    cv::waitKey(3);

    image_pub_.publish(valuepixels);
  }
};

int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_converter");
  ImageConverter ic;
  ros::spin();
  return 0;
}
